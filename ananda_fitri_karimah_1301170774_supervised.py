# -*- coding: utf-8 -*-
"""Ananda Fitri Karimah_1301170774_SUPERVISED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LphYOG_G9jI09J82C9PPmODPVEPpMtD8

TUGAS BESAR MACHINE LEARNING 

Ananda Fitri Karimah - 1301170774

IFIK-41-01

DATASET : FIFA20

# 1. Data Exploration and Data Prepocessing 

Data Exploration and Data Prepocessing ini ditujukan untuk membersihkan data dari data - data yang jauh (outlier), dan data-data yang mempunyai missing value. Agar saat diolah data tersebut hasil yang dihasilkan tidak jelek dikarenakan data yang terlalu menyebar

import library yang akan dipakai didalam tugas ini
"""

#import pandas untuk read dataset
import pandas as pd
#import numpy untuk perhitungan 
import numpy as np
#import csv untuk bisa membaca csv
import csv

"""Upload dataset fifa20 ke collab"""

#upload dataset ke google collab 
  from google.colab import files
  uploaded = files.upload()

"""Baca dataset fifa20 dengan pandas"""

#import io untuk read dataset
  import io
  #baca dataset
  data = pd.read_csv(io.BytesIO(uploaded['fifa20.csv']))

"""Tamplikan dan pilih atribut/kolom dari dataset yang diperlukan"""

#tampilkan dataset
data

"""saya memilih 12 atribut dari 104 atribut, karena saya ingin mencari pengaruh nilai value / value_eur seorang pemain bola terhadap kemampuannya"""

#pilih atribut yang ingin dipilih 
df = (data[["age",'overall', "potential" ,  "work_rate", "value_eur",  "wage_eur",  'pace', 'shooting', 'defending', 'passing','dribbling' ,'physic']])
#menampilkan 5 data awal
df.head()

"""Mengidentifikasi missing value yang ada di dalam dataset, lalu mereplacenya dengan mean"""

#identifikasi missing value 
df.isnull().sum()

#replace Nan dengan mean 
df.fillna(df.mean(), inplace=True)

#lihat kembali dataset apakah masih ada data yang kosong 
df.isnull().sum()

"""Lalu saya menidenfikasi ada varian value apa saja di dalam atribut/ kolom yang telah saya pilih"""

# code untuk menampilkan semua value namun 
# apabila di jalankan dengan code dibawah ini akan berat jalannya sehingga cukup sekali saja saya run dengan code dibawah ini
# pd.set_option("display.max_rows", None, "display.max_columns", None)

# code ini untuk menampilkan banyaknya value 
listval = []

for column in df.columns:
    print('----------------------------------------')
    print(f"{column} : {df[column].value_counts()}")
    print(f"{column} : {df[column].value_counts().count()}")
    listval.append(column)

"""Melihat apakah ada atribut dengan tipe selain float dan int"""

#di cek apakah ada atribut selain int dan float 
df.info()

"""Translate atribut/kolom yang bertipe selain int/float"""

#jika ada atribut yang berbentuk string maka ubah ke int
df = df.replace({'work_rate' : 'High/High'}, 1)
df = df.replace({'work_rate' : 'High/Medium'}, 2)
df = df.replace({'work_rate' : 'High/Low'}, 3)
df = df.replace({'work_rate' : 'Medium/High'}, 4)
df = df.replace({'work_rate' : 'Medium/Medium'}, 5)
df = df.replace({'work_rate' : 'Medium/Low'}, 6)
df = df.replace({'work_rate' : 'Low/High'}, 7)
df = df.replace({'work_rate' : 'Low/Medium'}, 8)
df = df.replace({'work_rate' : 'Low/Low'}, 9)

"""Import library untuk kebutuhan modelling"""

# Commented out IPython magic to ensure Python compatibility.
#import library untuk modelling 
#import matplotlib untuk bisa memnunculkan model
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 150
# %matplotlib inline

#memunculkan diagram korelasi 
mpl.rcParams['figure.dpi'] = 200
corr = df.select_dtypes(include = ['float64', 'int64']).iloc[:, :].corr()
plt.figure(figsize=(10, 10))
ax = sns.heatmap(corr, vmax=1, square=True)
# ax.set_xticklabels(rotation=30)
plt.xticks(rotation=45)

"""Buat boxplot untuk melihat outlier yang ada dalam atribut/kolom"""

#memunculkan boxplot
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["age"], ax=axes[0])
sns.boxplot(y=df["overall"], ax=axes[1])
sns.boxplot(y=df["potential"], ax=axes[2])
sns.boxplot(y=df["value_eur"], ax=axes[3])
sns.boxplot(y=df["work_rate"], ax=axes[4])
sns.boxplot(y=df["wage_eur"], ax=axes[5])
plt.subplots_adjust(wspace=1)

#memunculkan boxplot
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["pace"], ax=axes[0])
sns.boxplot(y=df["shooting"], ax=axes[1])
sns.boxplot(y=df["defending"], ax=axes[2])
sns.boxplot(y=df["passing"], ax=axes[3])
sns.boxplot(y=df["dribbling"], ax=axes[4])
sns.boxplot(y=df["physic"], ax=axes[5])
plt.subplots_adjust(wspace=1)

"""Dikarenakan varian value terlalu banyak, maka akan di buatkan nilai baru dengan range2 tertentu"""

#replace value data age ke dalam range2 tertentu lalu beri nilai
df['age'] = np.where(df['age'].between(16,21), 1, df['age'])
df['age'] = np.where(df['age'].between(21.01,26), 2, df['age'])
df['age'] = np.where(df['age'].between(26.01,31), 3, df['age'])
df['age'] = np.where(df['age'].between(31.01,36), 4, df['age'])
df['age'] = np.where(df['age'].between(36.01,42), 1, df['age'])

#replace value data shooting ke dalam range2 tertentu lalu beri nilai
df['shooting'] = np.where(df['shooting'].between(15.00000,25.000000), 1, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(25.000001,35.000000), 2, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(35.000001,45.000000), 3, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(45.000001,55.000000), 4, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(55.000001,65.000000), 5, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(65.000001,75.000000), 6, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(75.000001,85.000000), 7, df['shooting'])
df['shooting'] = np.where(df['shooting'].between(85.000001,95.000000), 8, df['shooting'])

#replace value data overall ke dalam range2 tertentu lalu beri nilai
df['overall'] = np.where(df['overall'].between(15,25), 1, df['overall'])
df['overall'] = np.where(df['overall'].between(25.01,35), 2, df['overall'])
df['overall'] = np.where(df['overall'].between(35.01,45), 3, df['overall'])
df['overall'] = np.where(df['overall'].between(45.01,55), 4, df['overall'])
df['overall'] = np.where(df['overall'].between(55.01,65), 5, df['overall'])
df['overall'] = np.where(df['overall'].between(65.01,75), 6, df['overall'])
df['overall'] = np.where(df['overall'].between(75.01,85), 7, df['overall'])
df['overall'] = np.where(df['overall'].between(85.01,95), 8, df['overall'])

#replace value data potential ke dalam range2 tertentu lalu beri nilai
df['potential'] = np.where(df['potential'].between(45.00000,55.000000), 1, df['potential'])
df['potential'] = np.where(df['potential'].between(55.000001,65.000000), 2, df['potential'])
df['potential'] = np.where(df['potential'].between(65.000001,75.000000), 3, df['potential'])
df['potential'] = np.where(df['potential'].between(75.000001,85.000000), 4, df['potential'])
df['potential'] = np.where(df['potential'].between(85.000001,95.000000), 5, df['potential'])

#karena masih ada data yang 0 maka di drop rownya 
datdrop=df[df['value_eur']==0].index
df.drop(datdrop , inplace=True)

#replace value data value_eur ke dalam range2 tertentu lalu beri nilai
df['value_eur'] = np.where(df['value_eur'].between(10000,10550000), 1, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(10550001,21100000), 2, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(21100001,31650000), 3, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(31650001,42200000), 4, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(42200001,52750000), 5, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(52750001,63300000), 6, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(63300001,73850000), 7, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(73850001,84400000), 8, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(84400001,94950000), 9, df['value_eur'])
df['value_eur'] = np.where(df['value_eur'].between(94950001,105500000), 8, df['value_eur'])

#replace value data physic ke dalam range2 tertentu lalu beri nilai
df['physic'] = np.where(df['physic'].between(27.000000,46.000000), 1, df['physic'])
df['physic'] = np.where(df['physic'].between(36.000001,45.000000), 2, df['physic'])
df['physic'] = np.where(df['physic'].between(45.000001,54.000000), 3, df['physic'])
df['physic'] = np.where(df['physic'].between(54.000001,63.000000), 4, df['physic'])
df['physic'] = np.where(df['physic'].between(63.000001,72.000000), 5, df['physic'])
df['physic'] = np.where(df['physic'].between(72.000001,81.000000), 6, df['physic'])
df['physic'] = np.where(df['physic'].between(81.000001,90.000000), 7, df['physic'])

#replace value data dribbling ke dalam range2 tertentu lalu beri nilai
df['dribbling'] = np.where(df['dribbling'].between(23.000000,28.000000), 1, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(28.000001,35.000000), 2, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(35.000001,42.000000), 3, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(42.000001,49.000000), 4, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(49.000001,58.000000), 5, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(58.000001,67.000000), 6, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(67.000001,76.000000), 7, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(76.000001,88.000000), 8, df['dribbling'])
df['dribbling'] = np.where(df['dribbling'].between(88.000001,100.000000), 9, df['dribbling'])

#replace value data passing ke dalam range2 tertentu lalu beri nilai
df['passing'] = np.where(df['passing'].between(24.000000,32.000000), 1, df['passing'])
df['passing'] = np.where(df['passing'].between(32.000001,40.000000), 2, df['passing'])
df['passing'] = np.where(df['passing'].between(40.000001,48.000000), 3, df['passing'])
df['passing'] = np.where(df['passing'].between(48.000001,56.000000), 4, df['passing'])
df['passing'] = np.where(df['passing'].between(56.000001,64.000000), 5, df['passing'])
df['passing'] = np.where(df['passing'].between(64.000001,72.000000), 6, df['passing'])
df['passing'] = np.where(df['passing'].between(72.000001,80.000000), 7, df['passing'])
df['passing'] = np.where(df['passing'].between(80.000001,92.000000), 8, df['passing'])

#replace value data defending ke dalam range2 tertentu lalu beri nilai
df['defending'] = np.where(df['defending'].between(15.000000,26.000000), 1, df['defending'])
df['defending'] = np.where(df['defending'].between(26.000001,36.000000), 2, df['defending'])
df['defending'] = np.where(df['defending'].between(36.000001,46.000000), 3, df['defending'])
df['defending'] = np.where(df['defending'].between(46.000001,56.000000), 4, df['defending'])
df['defending'] = np.where(df['defending'].between(56.000001,66.000000), 5, df['defending'])
df['defending'] = np.where(df['defending'].between(66.000001,76.000000), 6, df['defending'])
df['defending'] = np.where(df['defending'].between(76.000001,100.000000), 7, df['defending'])

#replace value data pace ke dalam range2 tertentu lalu beri nilai
df['pace'] = np.where(df['pace'].between(24.000000,32.000000), 1, df['pace'])
df['pace'] = np.where(df['pace'].between(32.000001,40.000000), 2, df['pace'])
df['pace'] = np.where(df['pace'].between(40.000001,48.000000), 3, df['pace'])
df['pace'] = np.where(df['pace'].between(48.000001,56.000000), 4, df['pace'])
df['pace'] = np.where(df['pace'].between(56.000001,64.000000), 5, df['pace'])
df['pace'] = np.where(df['pace'].between(64.000001,72.000000), 6, df['pace'])
df['pace'] = np.where(df['pace'].between(72.000001,80.000000), 7, df['pace'])
df['pace'] = np.where(df['pace'].between(80.000001,96.000000), 8, df['pace'])

#replace value data wage_eur ke dalam range2 tertentu lalu beri nilai
df['wage_eur'] = np.where(df['wage_eur'].between(1000,113000), 1, df['wage_eur'])
df['wage_eur'] = np.where(df['wage_eur'].between(113001,226000), 2, df['wage_eur'])
df['wage_eur'] = np.where(df['wage_eur'].between(226001,339000), 3, df['wage_eur'])
df['wage_eur'] = np.where(df['wage_eur'].between(339001,452000), 4, df['wage_eur'])
df['wage_eur'] = np.where(df['wage_eur'].between(452001,565000), 5, df['wage_eur'])

"""Setelah di replace dengan skala tertentu lalu dilihat kembali apakah ada outlier di dalamnya jika ada di drop row tersebut"""

#munculkan boxplot kembali setelah di buat range
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["age"], ax=axes[0])
sns.boxplot(y=df["overall"], ax=axes[1])
sns.boxplot(y=df["potential"], ax=axes[2])
sns.boxplot(y=df["value_eur"], ax=axes[3])
sns.boxplot(y=df["work_rate"], ax=axes[4])
sns.boxplot(y=df["wage_eur"], ax=axes[5])
plt.subplots_adjust(wspace=1)

#munculkan boxplot kembali setelah di buat range
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["pace"], ax=axes[0])
sns.boxplot(y=df["shooting"], ax=axes[1])
sns.boxplot(y=df["defending"], ax=axes[2])
sns.boxplot(y=df["passing"], ax=axes[3])
sns.boxplot(y=df["dribbling"], ax=axes[4])
sns.boxplot(y=df["physic"], ax=axes[5])
plt.subplots_adjust(wspace=1)

"""Jika ada outlier, Drop outlier yang memungkinkan untuk di drop"""

#karena masih ada outlier maka drop outlier pada pace
datdrop=df[df['pace']==1].index
df.drop(datdrop , inplace=True)

#karena masih ada outlier maka drop outlier pada physic
datdrop=df[df['physic']==1].index
df.drop(datdrop , inplace=True)

#karena masih ada outlier maka drop outlier pada physic
datdrop=df[df['physic']==7].index
df.drop(datdrop , inplace=True)

#karena masih ada outlier maka dribbling outlier pada dribbling
datdrop=df[df['dribbling']==1].index
df.drop(datdrop , inplace=True)

#karena masih ada outlier maka drop outlier pada overall
datdrop=df[df['overall']==8].index
df.drop(datdrop , inplace=True)

#karena masih ada outlier maka drop outlier pada work_rate
datdrop=df[df['work_rate']==9].index
df.drop(datdrop , inplace=True)

"""Lihat Kembali boxplot"""

#munculkan kembali boxplot, hasilnya adalah beberapa data sudah bersih 
#namun masih ada beberapa data yang outliernya tidak bisa di hapus karena akan mengahpus data yang banyak
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["pace"], ax=axes[0])
sns.boxplot(y=df["shooting"], ax=axes[1])
sns.boxplot(y=df["defending"], ax=axes[2])
sns.boxplot(y=df["passing"], ax=axes[3])
sns.boxplot(y=df["dribbling"], ax=axes[4])
sns.boxplot(y=df["physic"], ax=axes[5])
plt.subplots_adjust(wspace=1)

#munculkan kembali boxplot, hasilnya adalah beberapa data sudah bersih 
#namun masih ada beberapa data yang outliernya tidak bisa di hapus karena akan mengahpus data yang banyak
mpl.rcParams['figure.dpi'] = 250
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 6)
sns.boxplot(y=df["age"], ax=axes[0])
sns.boxplot(y=df["overall"], ax=axes[1])
sns.boxplot(y=df["potential"], ax=axes[2])
sns.boxplot(y=df["value_eur"], ax=axes[3])
sns.boxplot(y=df["work_rate"], ax=axes[4])
sns.boxplot(y=df["wage_eur"], ax=axes[5])
plt.subplots_adjust(wspace=1)

"""Jika sudah tidak ada outlier yang memungkinkan untuk di drop, liat ada berapa entri data yang ada di dalam dataframe, apakah berkurang jauh atau tidak, jika berkurang sangat jauh maka perhitungkan kembali drop outliernya dan dalam mereplace dan pemberian skala range terhadap data frame. lihat juga apakah semua data berubah atau tidak sesuai dengan range yang telah di sediakan"""

#hitung berapa banyak row yang telah terbuang
#jika terlalu banyak bisa diulang kembali penghapusan outliernya/pemberian range
df.count()

#munculkan data, lihat apakah benar data sudah terganti semua
df

"""Setelah di hapus outliernya, Data siap di klasifikasikan atau di klastering.

# 2. **CLASSIFICATION**

Klasifikasi menggunakan **Desicion Tree**.

Banyak metode yang ada pada klasifikasi, namun disini saya memilih untuk memakai **Desicion Tree**. Karena **Desicion Tree** ini bisa digunakan untuk masalah biner dan multikelas, dan tepat bagi data saya karena sebelumnya saya menggunakan metode lain dan beberapa ada yang tidak mendukung data seperti ini.

import library yang dibutuhkan
"""

#import pandas untuk membaca data
import pandas as pd
#import sklearn Desiciontree
from sklearn.tree import DecisionTreeClassifier 
#import train test spli untuk split data
from sklearn.model_selection import train_test_split
#import metrics untuk melihat accuracy  
from sklearn import metrics

"""Load Dataset yang akan digunakan"""

#load dataset yang ingin diambil dan diolah
col_names = ['age',	'overall',	'potential',	'work_rate',	'value_eur',	'pace',	'shooting',	'defending',	'passing',	'dribbling',	'physic', 'wage_eur']
clasdat = df
clasdat

"""identifikasi dependent value dan target data yang ingin di prediksi"""

#identifikasikan dependent dan target dari klasifikasi ini
dependent_cols = ['age',	'overall',	'potential',	'work_rate', 'pace',	'shooting',	'defending',	'passing',	'dribbling',	'physic']
X = df[dependent_cols] 
y = df.wage_eur

"""Split data menjadi 70% training set dan 30 % test set"""

#split data menjadi 70% train data dan 30% test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

"""Buat Desicion Tree Classifier, train Desicion Tree Classifier dan prediksi untuk test dataset"""

#buat decision klasifiernya
klasifier = DecisionTreeClassifier()
#train klassifiernya
klasifier = klasifier.fit(X_train,y_train)
#prediksi untuk test dataset
y_pred = klasifier.predict(X_test)

"""Munculkan data sebenarnya dan data prediksinya"""

#memunculkan data prediksinya di sandingkan dengan data aslinya
pred_act = pd.DataFrame({'Data Asli': y_test, 'Data Prediksi': y_pred})
pred_act

"""Munculkan Akurasinya menggunakan metrics"""

#print akurasinya 
print("Akurasi :",metrics.accuracy_score(y_test, y_pred))

